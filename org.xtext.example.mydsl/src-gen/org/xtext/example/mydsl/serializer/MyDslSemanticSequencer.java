/*
 * generated by Xtext 2.37.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.AndCondition;
import org.xtext.example.mydsl.myDsl.Comparison;
import org.xtext.example.mydsl.myDsl.DifficultyCondition;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.OrCondition;
import org.xtext.example.mydsl.myDsl.PrimaryCondition;
import org.xtext.example.mydsl.myDsl.Rule;
import org.xtext.example.mydsl.myDsl.ShiftCondition;
import org.xtext.example.mydsl.myDsl.TIME;
import org.xtext.example.mydsl.myDsl.Task;
import org.xtext.example.mydsl.myDsl.Worker;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.AND_CONDITION:
				sequence_AndCondition(context, (AndCondition) semanticObject); 
				return; 
			case MyDslPackage.COMPARISON:
				sequence_Comparison(context, (Comparison) semanticObject); 
				return; 
			case MyDslPackage.DIFFICULTY_CONDITION:
				sequence_DifficultyCondition(context, (DifficultyCondition) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.OR_CONDITION:
				sequence_OrCondition(context, (OrCondition) semanticObject); 
				return; 
			case MyDslPackage.PRIMARY_CONDITION:
				sequence_PrimaryCondition(context, (PrimaryCondition) semanticObject); 
				return; 
			case MyDslPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case MyDslPackage.SHIFT_CONDITION:
				sequence_ShiftCondition(context, (ShiftCondition) semanticObject); 
				return; 
			case MyDslPackage.TIME:
				sequence_TIME(context, (TIME) semanticObject); 
				return; 
			case MyDslPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			case MyDslPackage.WORKER:
				sequence_Worker(context, (Worker) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns AndCondition
	 *     OrCondition returns AndCondition
	 *     OrCondition.OrCondition_1_0 returns AndCondition
	 *     AndCondition returns AndCondition
	 *     AndCondition.AndCondition_1_0 returns AndCondition
	 *
	 * Constraint:
	 *     (left=AndCondition_AndCondition_1_0 right=PrimaryCondition)
	 * </pre>
	 */
	protected void sequence_AndCondition(ISerializationContext context, AndCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.AND_CONDITION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.AND_CONDITION__LEFT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.AND_CONDITION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.AND_CONDITION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAndConditionAccess().getAndConditionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAndConditionAccess().getRightPrimaryConditionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns Comparison
	 *     OrCondition returns Comparison
	 *     OrCondition.OrCondition_1_0 returns Comparison
	 *     AndCondition returns Comparison
	 *     AndCondition.AndCondition_1_0 returns Comparison
	 *     PrimaryCondition returns Comparison
	 *     Comparison returns Comparison
	 *
	 * Constraint:
	 *     (operator=ComparisonOperator duration=INT)
	 * </pre>
	 */
	protected void sequence_Comparison(ISerializationContext context, Comparison semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.COMPARISON__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.COMPARISON__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.COMPARISON__DURATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.COMPARISON__DURATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComparisonAccess().getOperatorComparisonOperatorTerminalRuleCall_0_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getComparisonAccess().getDurationINTTerminalRuleCall_1_0(), semanticObject.getDuration());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns DifficultyCondition
	 *     OrCondition returns DifficultyCondition
	 *     OrCondition.OrCondition_1_0 returns DifficultyCondition
	 *     AndCondition returns DifficultyCondition
	 *     AndCondition.AndCondition_1_0 returns DifficultyCondition
	 *     PrimaryCondition returns DifficultyCondition
	 *     DifficultyCondition returns DifficultyCondition
	 *
	 * Constraint:
	 *     difficulty=Difficulty
	 * </pre>
	 */
	protected void sequence_DifficultyCondition(ISerializationContext context, DifficultyCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DIFFICULTY_CONDITION__DIFFICULTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DIFFICULTY_CONDITION__DIFFICULTY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDifficultyConditionAccess().getDifficultyDifficultyEnumRuleCall_0(), semanticObject.getDifficulty());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     ((workers+=Worker* tasks+=Task+ rules+=Rule+) | (workers+=Worker* rules+=Rule+) | rules+=Rule+)?
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns OrCondition
	 *     OrCondition returns OrCondition
	 *     OrCondition.OrCondition_1_0 returns OrCondition
	 *
	 * Constraint:
	 *     (left=OrCondition_OrCondition_1_0 right=AndCondition)
	 * </pre>
	 */
	protected void sequence_OrCondition(ISerializationContext context, OrCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OR_CONDITION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OR_CONDITION__LEFT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.OR_CONDITION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.OR_CONDITION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOrConditionAccess().getOrConditionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getOrConditionAccess().getRightAndConditionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns PrimaryCondition
	 *     OrCondition returns PrimaryCondition
	 *     OrCondition.OrCondition_1_0 returns PrimaryCondition
	 *     AndCondition returns PrimaryCondition
	 *     AndCondition.AndCondition_1_0 returns PrimaryCondition
	 *     PrimaryCondition returns PrimaryCondition
	 *
	 * Constraint:
	 *     inner=Condition
	 * </pre>
	 */
	protected void sequence_PrimaryCondition(ISerializationContext context, PrimaryCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.PRIMARY_CONDITION__INNER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.PRIMARY_CONDITION__INNER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryConditionAccess().getInnerConditionParserRuleCall_0_2_0(), semanticObject.getInner());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     (condition=Condition assign=SeniorityLevel)
	 * </pre>
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RULE__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RULE__CONDITION));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RULE__ASSIGN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RULE__ASSIGN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRuleAccess().getConditionConditionParserRuleCall_1_0(), semanticObject.getCondition());
		feeder.accept(grammarAccess.getRuleAccess().getAssignSeniorityLevelEnumRuleCall_3_0(), semanticObject.getAssign());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns ShiftCondition
	 *     OrCondition returns ShiftCondition
	 *     OrCondition.OrCondition_1_0 returns ShiftCondition
	 *     AndCondition returns ShiftCondition
	 *     AndCondition.AndCondition_1_0 returns ShiftCondition
	 *     PrimaryCondition returns ShiftCondition
	 *     ShiftCondition returns ShiftCondition
	 *
	 * Constraint:
	 *     shift=Shift
	 * </pre>
	 */
	protected void sequence_ShiftCondition(ISerializationContext context, ShiftCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SHIFT_CONDITION__SHIFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SHIFT_CONDITION__SHIFT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShiftConditionAccess().getShiftShiftEnumRuleCall_0(), semanticObject.getShift());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TIME returns TIME
	 *
	 * Constraint:
	 *     (hours=INT minutes=INT)
	 * </pre>
	 */
	protected void sequence_TIME(ISerializationContext context, TIME semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TIME__HOURS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TIME__HOURS));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TIME__MINUTES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TIME__MINUTES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTIMEAccess().getHoursINTTerminalRuleCall_0_0(), semanticObject.getHours());
		feeder.accept(grammarAccess.getTIMEAccess().getMinutesINTTerminalRuleCall_2_0(), semanticObject.getMinutes());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (name=ID difficulty=Difficulty duration=INT start=TIME)
	 * </pre>
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TASK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TASK__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TASK__DIFFICULTY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TASK__DIFFICULTY));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TASK__DURATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TASK__DURATION));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TASK__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TASK__START));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTaskAccess().getDifficultyDifficultyEnumRuleCall_5_0(), semanticObject.getDifficulty());
		feeder.accept(grammarAccess.getTaskAccess().getDurationINTTerminalRuleCall_9_0(), semanticObject.getDuration());
		feeder.accept(grammarAccess.getTaskAccess().getStartTIMEParserRuleCall_13_0(), semanticObject.getStart());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Worker returns Worker
	 *
	 * Constraint:
	 *     (id=ID name=STRING seniority=SeniorityLevel isActive=Boolean)
	 * </pre>
	 */
	protected void sequence_Worker(ISerializationContext context, Worker semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.WORKER__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.WORKER__ID));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.WORKER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.WORKER__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.WORKER__SENIORITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.WORKER__SENIORITY));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.WORKER__IS_ACTIVE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.WORKER__IS_ACTIVE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWorkerAccess().getIdIDTerminalRuleCall_1_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getWorkerAccess().getNameSTRINGTerminalRuleCall_5_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getWorkerAccess().getSenioritySeniorityLevelEnumRuleCall_9_0(), semanticObject.getSeniority());
		feeder.accept(grammarAccess.getWorkerAccess().getIsActiveBooleanEnumRuleCall_13_0(), semanticObject.getIsActive());
		feeder.finish();
	}
	
	
}
