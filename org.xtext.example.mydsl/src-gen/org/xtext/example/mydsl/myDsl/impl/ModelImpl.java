/**
 * generated by Xtext 2.37.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.xtext.example.mydsl.myDsl.AndCondition;
import org.xtext.example.mydsl.myDsl.Comparison;
import org.xtext.example.mydsl.myDsl.Condition;
import org.xtext.example.mydsl.myDsl.DifficultyCondition;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.OrCondition;
import org.xtext.example.mydsl.myDsl.PrimaryCondition;
import org.xtext.example.mydsl.myDsl.Rule;
import org.xtext.example.mydsl.myDsl.SeniorityLevel;
import org.xtext.example.mydsl.myDsl.ShiftCondition;
import org.xtext.example.mydsl.myDsl.Task;
import org.xtext.example.mydsl.myDsl.Worker;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ModelImpl#getWorkers <em>Workers</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ModelImpl#getTasks <em>Tasks</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ModelImpl#getRules <em>Rules</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getWorkers() <em>Workers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWorkers()
   * @generated
   * @ordered
   */
  protected EList<Worker> workers;

  /**
   * The cached value of the '{@link #getTasks() <em>Tasks</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTasks()
   * @generated
   * @ordered
   */
  protected EList<Task> tasks;

  /**
   * The cached value of the '{@link #getRules() <em>Rules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRules()
   * @generated
   * @ordered
   */
  protected EList<Rule> rules;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Worker> getWorkers()
  {
    if (workers == null)
    {
      workers = new EObjectContainmentEList<Worker>(Worker.class, this, MyDslPackage.MODEL__WORKERS);
    }
    return workers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Task> getTasks()
  {
    if (tasks == null)
    {
      tasks = new EObjectContainmentEList<Task>(Task.class, this, MyDslPackage.MODEL__TASKS);
    }
    return tasks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Rule> getRules()
  {
    if (rules == null)
    {
      rules = new EObjectContainmentEList<Rule>(Rule.class, this, MyDslPackage.MODEL__RULES);
    }
    return rules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.MODEL__WORKERS:
        return ((InternalEList<?>)getWorkers()).basicRemove(otherEnd, msgs);
      case MyDslPackage.MODEL__TASKS:
        return ((InternalEList<?>)getTasks()).basicRemove(otherEnd, msgs);
      case MyDslPackage.MODEL__RULES:
        return ((InternalEList<?>)getRules()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.MODEL__WORKERS:
        return getWorkers();
      case MyDslPackage.MODEL__TASKS:
        return getTasks();
      case MyDslPackage.MODEL__RULES:
        return getRules();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.MODEL__WORKERS:
        getWorkers().clear();
        getWorkers().addAll((Collection<? extends Worker>)newValue);
        return;
      case MyDslPackage.MODEL__TASKS:
        getTasks().clear();
        getTasks().addAll((Collection<? extends Task>)newValue);
        return;
      case MyDslPackage.MODEL__RULES:
        getRules().clear();
        getRules().addAll((Collection<? extends Rule>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.MODEL__WORKERS:
        getWorkers().clear();
        return;
      case MyDslPackage.MODEL__TASKS:
        getTasks().clear();
        return;
      case MyDslPackage.MODEL__RULES:
        getRules().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.MODEL__WORKERS:
        return workers != null && !workers.isEmpty();
      case MyDslPackage.MODEL__TASKS:
        return tasks != null && !tasks.isEmpty();
      case MyDslPackage.MODEL__RULES:
        return rules != null && !rules.isEmpty();
    }
    return super.eIsSet(featureID);
  }
  
  private Map< Worker, List<Task> > assignments = new HashMap<>();
  
  public void evaluate() {
      List<Task> tasks = this.getTasks();
      List<Worker> workers = this.getWorkers();
      List<Rule> rules = this.getRules();

      assignments.clear(); //initialize
      
      // For each task, try to assign it
      for (Task task : tasks) {
          boolean taskAssigned = false;
          boolean ruleMatched = false;
          
          // Process each rule
          for (Rule rule : rules) {
              if (ruleMatchesTask(rule, task)) {
                  ruleMatched = true;
                  // Find all candidate workers: active and with required seniority.
                  List<Worker> candidates = new ArrayList<>();
                  for (Worker worker : workers) {
                      if (worker.getSeniority().equals(rule.getAssign())
                              && worker.getIsActive().toString().equals("True")) {
                          candidates.add(worker);
                      }
                  }
                  
                  // no active worker with required seniority exists
                  if (candidates.isEmpty()) {
                      System.out.println(String.format("Task assignment for task %s not possible (all conditions false / no active worker with required seniority exists).", task.getName()));
                      taskAssigned = true;  // consider the task as "processed"
                      break; 
                  }
                  
                  // have possible employees, the check candidates for availability
                  for (Worker candidate : candidates) {
                      if (isWorkerAvailable(candidate, task)) {
                          // Candidate is available; assign the task.
                          taskAssigned = true;
                          if (assignments.containsKey(candidate)) {
                              assignments.get(candidate).add(task);
                          } else {
                              List<Task> candidateTasks = new ArrayList<>();
                              candidateTasks.add(task);
                              assignments.put(candidate, candidateTasks);
                          }
                          System.out.println(String.format(
                              "Task assignment to %s %s for task %s from %02d:%02d to %s.",
                              candidate.getSeniority(),
                              candidate.getName(),  
                              task.getName(),
                              task.getStart().getHours(),
                              task.getStart().getMinutes(),
                              calculateEndTime(task)));
                          break; 
                      }
                  }
                  if (taskAssigned) {
                      break;
                  }
                  else { // we cannot assign the task due to conflicts, printing out all the conflicting tasks
                  	for (Worker candidate : candidates) {
                  		Task overlappingTask = getOverlappingTask(candidate, task);
                          System.out.println(String.format(
                              "Task assignment to %s for task %s not possible from %02d:%02d to %s due to %s.",
                              candidate.getSeniority(),
                              task.getName(),
                              task.getStart().getHours(),
                              task.getStart().getMinutes(),
                              calculateEndTime(overlappingTask),
                              overlappingTask.getName()));
                  	}
                  }
              }
          }
          // If no rule matched the task or if no candidate worker was found/available,
          if (!taskAssigned && !ruleMatched) {
              System.out.println(String.format("Task assignment for task %s not possible (all conditions false / no active worker with required seniority exists).", task.getName()));
          }
      }
  }

  private boolean ruleMatchesTask(Rule rule, Task task) {
      // Get the condition from the rule
      Condition condition = rule.getCondition();

      // Evaluate the condition recursively
      return evaluateCondition(condition, task);
  }

  private boolean evaluateCondition(Condition condition, Task task) {
      if (condition instanceof OrCondition) {
          // Handle OR conditions
          OrCondition orCondition = (OrCondition) condition;
          return evaluateCondition(orCondition.getLeft(), task) || 
                 evaluateCondition(orCondition.getRight(), task);
      } else if (condition instanceof AndCondition) {
          // Handle AND conditions
          AndCondition andCondition = (AndCondition) condition;
          return evaluateCondition(andCondition.getLeft(), task) && 
                 evaluateCondition(andCondition.getRight(), task);
      } else if (condition instanceof Comparison) {
          // Handle comparison conditions
          return ((Comparison)condition).evaluate(task.getDuration());
      } else if (condition instanceof ShiftCondition) {
          // Handle shift conditions 
          return ((ShiftCondition)condition).evaluate(getTaskShift(task.getStart().getHours(), task.getStart().getMinutes()));
      } else if (condition instanceof DifficultyCondition) {
          // Handle difficulty conditions
          return ((DifficultyCondition)condition).evaluate(task.getDifficulty().toString().toLowerCase());
      } else if (condition instanceof PrimaryCondition) {
          // Handle other conditions
      	PrimaryCondition primary = (PrimaryCondition) condition;
          return evaluateCondition( primary.getInner(), task);  //?? Primary Condition
      } else {
      	throw new IllegalArgumentException("Unknown condition type: " + condition.getClass().getSimpleName());
      }
  }

  private String getTaskShift(int h, int m) {
      // Parse the start time (HH:MM) and determine the shift
      //String[] parts = startTime.split(":");
      
      //System.out.print(parts);
      
      int hours = h;

      if (hours >= 6 && hours < 14) {
          return "dayshift";
      } else if (hours >= 14 && hours < 22) {
          return "eveningshift";
      } else {
          return "nightshift";
      }
  }
  
  private boolean isWorkerAvailable(Worker worker, Task task) {
		//
  	List<Task> assignedTasks = assignments.getOrDefault(worker, new ArrayList<>());
  	for (Task assignedTask : assignedTasks) {
  		if (isOverlapping(assignedTask, task)) {
  			return false;
  		}
  	}
		return true;
	}

	private boolean isOverlapping(Task t1, Task t2) {
		String t1Start = t1.getStart().getHours() + ":" + t1.getStart().getMinutes();
		String t2Start = t2.getStart().getHours() + ":" + t2.getStart().getMinutes();
		String t1End = calculateEndTime(t1);
		String t2End = calculateEndTime(t2);
		
		return t1End.compareTo(t2Start) > 0 || t2End.compareTo(t1Start)> 0;		
	}
	
	private Task getOverlappingTask(Worker worker, Task t) {
		List<Task> assignedTasks = assignments.getOrDefault(worker, new ArrayList<>());
		for (Task assignedTask : assignedTasks) {
			if (isOverlapping(assignedTask, t)) {
				return assignedTask;
			}
		}
		return null;

	}

	private String calculateEndTime(Task task) {
      // Calculate the end time of the task based on its start time and duration
      //String[] parts = task.getStart().toString().split(":");
      int hours = task.getStart().getHours();
      int minutes = task.getStart().getMinutes();

      int durationHours = task.getDuration() / 60;
      int durationMinutes = task.getDuration() % 60;

      hours += durationHours;
      minutes += durationMinutes;

      while (minutes >= 60) {
          hours += 1;
          minutes -= 60;
      }

      return String.format("%02d:%02d", hours, minutes);
  }

} //ModelImpl
