/*
 * generated by Xtext 2.37.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWorkersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWorkersWorkerParserRuleCall_0_0 = (RuleCall)cWorkersAssignment_0.eContents().get(0);
		private final Assignment cTasksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTasksTaskParserRuleCall_1_0 = (RuleCall)cTasksAssignment_1.eContents().get(0);
		private final Assignment cRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulesRuleParserRuleCall_2_0 = (RuleCall)cRulesAssignment_2.eContents().get(0);
		
		//Model:
		//    workers+=Worker*
		//    tasks+=Task*
		//    rules+=Rule*;
		@Override public ParserRule getRule() { return rule; }
		
		//workers+=Worker*
		//tasks+=Task*
		//rules+=Rule*
		public Group getGroup() { return cGroup; }
		
		//workers+=Worker*
		public Assignment getWorkersAssignment_0() { return cWorkersAssignment_0; }
		
		//Worker
		public RuleCall getWorkersWorkerParserRuleCall_0_0() { return cWorkersWorkerParserRuleCall_0_0; }
		
		//tasks+=Task*
		public Assignment getTasksAssignment_1() { return cTasksAssignment_1; }
		
		//Task
		public RuleCall getTasksTaskParserRuleCall_1_0() { return cTasksTaskParserRuleCall_1_0; }
		
		//rules+=Rule*
		public Assignment getRulesAssignment_2() { return cRulesAssignment_2; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_2_0() { return cRulesRuleParserRuleCall_2_0; }
	}
	public class WorkerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Worker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameSTRINGTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSeniorityKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cSeniorityAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cSenioritySeniorityLevelEnumRuleCall_9_0 = (RuleCall)cSeniorityAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cActiveKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cEqualsSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cIsActiveAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cIsActiveBooleanEnumRuleCall_13_0 = (RuleCall)cIsActiveAssignment_13.eContents().get(0);
		private final Keyword cSemicolonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		///**
		// * worker W1 {
		//    name = "Alice";
		//    seniority = senior;
		//    employeeNumber = 101;
		//    active = True;
		//}
		// */
		//Worker:
		//    'worker' id=ID '{'
		//        'name' '=' name=STRING ';'
		//        'seniority' '=' seniority=SeniorityLevel ';'
		//        //'employeeNumber' '=' employeeNumber=INT ';'
		//        'active' '=' isActive=Boolean ';'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'worker' id=ID '{'
		//    'name' '=' name=STRING ';'
		//    'seniority' '=' seniority=SeniorityLevel ';'
		//    //'employeeNumber' '=' employeeNumber=INT ';'
		//    'active' '=' isActive=Boolean ';'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'worker'
		public Keyword getWorkerKeyword_0() { return cWorkerKeyword_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'name'
		public Keyword getNameKeyword_3() { return cNameKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//name=STRING
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_5_0() { return cNameSTRINGTerminalRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//'seniority'
		public Keyword getSeniorityKeyword_7() { return cSeniorityKeyword_7; }
		
		//'='
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }
		
		//seniority=SeniorityLevel
		public Assignment getSeniorityAssignment_9() { return cSeniorityAssignment_9; }
		
		//SeniorityLevel
		public RuleCall getSenioritySeniorityLevelEnumRuleCall_9_0() { return cSenioritySeniorityLevelEnumRuleCall_9_0; }
		
		//';'
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
		
		////'employeeNumber' '=' employeeNumber=INT ';'
		//'active'
		public Keyword getActiveKeyword_11() { return cActiveKeyword_11; }
		
		//'='
		public Keyword getEqualsSignKeyword_12() { return cEqualsSignKeyword_12; }
		
		//isActive=Boolean
		public Assignment getIsActiveAssignment_13() { return cIsActiveAssignment_13; }
		
		//Boolean
		public RuleCall getIsActiveBooleanEnumRuleCall_13_0() { return cIsActiveBooleanEnumRuleCall_13_0; }
		
		//';'
		public Keyword getSemicolonKeyword_14() { return cSemicolonKeyword_14; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDifficultyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDifficultyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDifficultyDifficultyEnumRuleCall_5_0 = (RuleCall)cDifficultyAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cDurationKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cDurationAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDurationINTTerminalRuleCall_9_0 = (RuleCall)cDurationAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cStartKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cEqualsSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cStartAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cStartTIMEParserRuleCall_13_0 = (RuleCall)cStartAssignment_13.eContents().get(0);
		private final Keyword cSemicolonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		///**
		// * task T1 {
		//    difficulty = easy;
		//    duration = 120;
		//    start = 9:00;
		//}
		// */
		//Task:
		//    'task' name=ID '{'
		//        'difficulty' '=' difficulty=Difficulty ';'
		//        'duration' '=' duration=INT ';'
		//        'start' '=' start=TIME ';'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'task' name=ID '{'
		//    'difficulty' '=' difficulty=Difficulty ';'
		//    'duration' '=' duration=INT ';'
		//    'start' '=' start=TIME ';'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'difficulty'
		public Keyword getDifficultyKeyword_3() { return cDifficultyKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//difficulty=Difficulty
		public Assignment getDifficultyAssignment_5() { return cDifficultyAssignment_5; }
		
		//Difficulty
		public RuleCall getDifficultyDifficultyEnumRuleCall_5_0() { return cDifficultyDifficultyEnumRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//'duration'
		public Keyword getDurationKeyword_7() { return cDurationKeyword_7; }
		
		//'='
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }
		
		//duration=INT
		public Assignment getDurationAssignment_9() { return cDurationAssignment_9; }
		
		//INT
		public RuleCall getDurationINTTerminalRuleCall_9_0() { return cDurationINTTerminalRuleCall_9_0; }
		
		//';'
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
		
		//'start'
		public Keyword getStartKeyword_11() { return cStartKeyword_11; }
		
		//'='
		public Keyword getEqualsSignKeyword_12() { return cEqualsSignKeyword_12; }
		
		//start=TIME
		public Assignment getStartAssignment_13() { return cStartAssignment_13; }
		
		//TIME
		public RuleCall getStartTIMEParserRuleCall_13_0() { return cStartTIMEParserRuleCall_13_0; }
		
		//';'
		public Keyword getSemicolonKeyword_14() { return cSemicolonKeyword_14; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAssignAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAssignSeniorityLevelEnumRuleCall_3_0 = (RuleCall)cAssignAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///**
		// * if (> 180 min OR hard) then senior;
		// */
		//Rule:
		//    'if' condition=Condition 'then' assign=SeniorityLevel ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=Condition 'then' assign=SeniorityLevel ';'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_0() { return cConditionConditionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//assign=SeniorityLevel
		public Assignment getAssignAssignment_3() { return cAssignAssignment_3; }
		
		//SeniorityLevel
		public RuleCall getAssignSeniorityLevelEnumRuleCall_3_0() { return cAssignSeniorityLevelEnumRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TIMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TIME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHoursAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHoursINTTerminalRuleCall_0_0 = (RuleCall)cHoursAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMinutesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMinutesINTTerminalRuleCall_2_0 = (RuleCall)cMinutesAssignment_2.eContents().get(0);
		
		//TIME:
		//    hours=INT ':' minutes=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//hours=INT ':' minutes=INT
		public Group getGroup() { return cGroup; }
		
		//hours=INT
		public Assignment getHoursAssignment_0() { return cHoursAssignment_0; }
		
		//INT
		public RuleCall getHoursINTTerminalRuleCall_0_0() { return cHoursINTTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//minutes=INT
		public Assignment getMinutesAssignment_2() { return cMinutesAssignment_2; }
		
		//INT
		public RuleCall getMinutesINTTerminalRuleCall_2_0() { return cMinutesINTTerminalRuleCall_2_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Condition");
		private final RuleCall cOrConditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Condition:
		//    OrCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//OrCondition
		public RuleCall getOrConditionParserRuleCall() { return cOrConditionParserRuleCall; }
	}
	public class OrConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OrCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndConditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrConditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cORKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndConditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		///**
		// * A OR (B AND C)
		// * First, an AndCondition is parsed (base case).
		// * Then, if OR/AND exists, the parser creates an OrCondition and assigns left=current (previously parsed expression)**.
		// */
		//OrCondition returns Condition:
		//    AndCondition ({OrCondition.left=current} 'OR' right=AndCondition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndCondition ({OrCondition.left=current} 'OR' right=AndCondition)*
		public Group getGroup() { return cGroup; }
		
		//AndCondition
		public RuleCall getAndConditionParserRuleCall_0() { return cAndConditionParserRuleCall_0; }
		
		//({OrCondition.left=current} 'OR' right=AndCondition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrCondition.left=current}
		public Action getOrConditionLeftAction_1_0() { return cOrConditionLeftAction_1_0; }
		
		//'OR'
		public Keyword getORKeyword_1_1() { return cORKeyword_1_1; }
		
		//right=AndCondition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndCondition
		public RuleCall getRightAndConditionParserRuleCall_1_2_0() { return cRightAndConditionParserRuleCall_1_2_0; }
	}
	public class AndConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AndCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryConditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndConditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryConditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndCondition returns Condition:
		//    PrimaryCondition ({AndCondition.left=current} 'AND' right=PrimaryCondition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryCondition ({AndCondition.left=current} 'AND' right=PrimaryCondition)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryCondition
		public RuleCall getPrimaryConditionParserRuleCall_0() { return cPrimaryConditionParserRuleCall_0; }
		
		//({AndCondition.left=current} 'AND' right=PrimaryCondition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndCondition.left=current}
		public Action getAndConditionLeftAction_1_0() { return cAndConditionLeftAction_1_0; }
		
		//'AND'
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }
		
		//right=PrimaryCondition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PrimaryCondition
		public RuleCall getRightPrimaryConditionParserRuleCall_1_2_0() { return cRightPrimaryConditionParserRuleCall_1_2_0; }
	}
	public class PrimaryConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPrimaryConditionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInnerAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInnerConditionParserRuleCall_0_2_0 = (RuleCall)cInnerAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final RuleCall cComparisonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cShiftConditionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDifficultyConditionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimaryCondition returns Condition:
		//    //'(' Condition ')' |
		//    {PrimaryCondition} '(' inner=Condition ')' |
		//    Comparison |
		//    ShiftCondition |
		//    DifficultyCondition;
		@Override public ParserRule getRule() { return rule; }
		
		////'(' Condition ')' |
		//{PrimaryCondition} '(' inner=Condition ')' |
		//Comparison |
		//ShiftCondition |
		//DifficultyCondition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////'(' Condition ')' |
		//{PrimaryCondition} '(' inner=Condition ')'
		public Group getGroup_0() { return cGroup_0; }
		
		////'(' Condition ')' |
		//{PrimaryCondition}
		public Action getPrimaryConditionAction_0_0() { return cPrimaryConditionAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//inner=Condition
		public Assignment getInnerAssignment_0_2() { return cInnerAssignment_0_2; }
		
		//Condition
		public RuleCall getInnerConditionParserRuleCall_0_2_0() { return cInnerConditionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_1() { return cComparisonParserRuleCall_1; }
		
		//ShiftCondition
		public RuleCall getShiftConditionParserRuleCall_2() { return cShiftConditionParserRuleCall_2; }
		
		//DifficultyCondition
		public RuleCall getDifficultyConditionParserRuleCall_3() { return cDifficultyConditionParserRuleCall_3; }
	}
	public class ShiftConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ShiftCondition");
		private final Assignment cShiftAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cShiftShiftEnumRuleCall_0 = (RuleCall)cShiftAssignment.eContents().get(0);
		
		// /**
		//  * PrimaryCondition returns Condition:
		//    NestedCondition | SimpleCondition;
		//NestedCondition returns Condition:
		//    '(' Condition ')';
		//SimpleCondition returns Condition:
		//    Comparison | ShiftCondition | DifficultyCondition;
		//  */
		//ShiftCondition:
		//    shift=Shift;
		@Override public ParserRule getRule() { return rule; }
		
		//shift=Shift
		public Assignment getShiftAssignment() { return cShiftAssignment; }
		
		//Shift
		public RuleCall getShiftShiftEnumRuleCall_0() { return cShiftShiftEnumRuleCall_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorComparisonOperatorTerminalRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cDurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDurationINTTerminalRuleCall_1_0 = (RuleCall)cDurationAssignment_1.eContents().get(0);
		private final Keyword cMinKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Comparison:
		//    operator=ComparisonOperator duration=INT 'min'?;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=ComparisonOperator duration=INT 'min'?
		public Group getGroup() { return cGroup; }
		
		//operator=ComparisonOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//ComparisonOperator
		public RuleCall getOperatorComparisonOperatorTerminalRuleCall_0_0() { return cOperatorComparisonOperatorTerminalRuleCall_0_0; }
		
		//duration=INT
		public Assignment getDurationAssignment_1() { return cDurationAssignment_1; }
		
		//INT
		public RuleCall getDurationINTTerminalRuleCall_1_0() { return cDurationINTTerminalRuleCall_1_0; }
		
		//'min'?
		public Keyword getMinKeyword_2() { return cMinKeyword_2; }
	}
	public class DifficultyConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DifficultyCondition");
		private final Assignment cDifficultyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDifficultyDifficultyEnumRuleCall_0 = (RuleCall)cDifficultyAssignment.eContents().get(0);
		
		//DifficultyCondition:
		//    difficulty=Difficulty;
		@Override public ParserRule getRule() { return rule; }
		
		//difficulty=Difficulty
		public Assignment getDifficultyAssignment() { return cDifficultyAssignment; }
		
		//Difficulty
		public RuleCall getDifficultyDifficultyEnumRuleCall_0() { return cDifficultyDifficultyEnumRuleCall_0; }
	}
	
	public class SeniorityLevelElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SeniorityLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTraineeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTraineeTraineeKeyword_0_0 = (Keyword)cTraineeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cJuniorEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cJuniorJuniorKeyword_1_0 = (Keyword)cJuniorEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSeniorEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSeniorSeniorKeyword_2_0 = (Keyword)cSeniorEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SeniorityLevel:
		//    trainee | junior | senior;
		public EnumRule getRule() { return rule; }
		
		//trainee | junior | senior
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//trainee
		public EnumLiteralDeclaration getTraineeEnumLiteralDeclaration_0() { return cTraineeEnumLiteralDeclaration_0; }
		
		public Keyword getTraineeTraineeKeyword_0_0() { return cTraineeTraineeKeyword_0_0; }
		
		//junior
		public EnumLiteralDeclaration getJuniorEnumLiteralDeclaration_1() { return cJuniorEnumLiteralDeclaration_1; }
		
		public Keyword getJuniorJuniorKeyword_1_0() { return cJuniorJuniorKeyword_1_0; }
		
		//senior
		public EnumLiteralDeclaration getSeniorEnumLiteralDeclaration_2() { return cSeniorEnumLiteralDeclaration_2; }
		
		public Keyword getSeniorSeniorKeyword_2_0() { return cSeniorSeniorKeyword_2_0; }
	}
	public class DifficultyElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Difficulty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEasyEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEasyEasyKeyword_0_0 = (Keyword)cEasyEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cModerateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cModerateModerateKeyword_1_0 = (Keyword)cModerateEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHardEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHardHardKeyword_2_0 = (Keyword)cHardEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Difficulty:
		//    easy | moderate | hard;
		public EnumRule getRule() { return rule; }
		
		//easy | moderate | hard
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//easy
		public EnumLiteralDeclaration getEasyEnumLiteralDeclaration_0() { return cEasyEnumLiteralDeclaration_0; }
		
		public Keyword getEasyEasyKeyword_0_0() { return cEasyEasyKeyword_0_0; }
		
		//moderate
		public EnumLiteralDeclaration getModerateEnumLiteralDeclaration_1() { return cModerateEnumLiteralDeclaration_1; }
		
		public Keyword getModerateModerateKeyword_1_0() { return cModerateModerateKeyword_1_0; }
		
		//hard
		public EnumLiteralDeclaration getHardEnumLiteralDeclaration_2() { return cHardEnumLiteralDeclaration_2; }
		
		public Keyword getHardHardKeyword_2_0() { return cHardHardKeyword_2_0; }
	}
	public class BooleanElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTrueEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTrueTrueKeyword_0_0 = (Keyword)cTrueEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFalseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFalseFalseKeyword_1_0 = (Keyword)cFalseEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Boolean:
		//    True | False;
		public EnumRule getRule() { return rule; }
		
		//True | False
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//True
		public EnumLiteralDeclaration getTrueEnumLiteralDeclaration_0() { return cTrueEnumLiteralDeclaration_0; }
		
		public Keyword getTrueTrueKeyword_0_0() { return cTrueTrueKeyword_0_0; }
		
		//False
		public EnumLiteralDeclaration getFalseEnumLiteralDeclaration_1() { return cFalseEnumLiteralDeclaration_1; }
		
		public Keyword getFalseFalseKeyword_1_0() { return cFalseFalseKeyword_1_0; }
	}
	public class ShiftElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Shift");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNightshiftEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNightshiftNightshiftKeyword_0_0 = (Keyword)cNightshiftEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDayshiftEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDayshiftDayshiftKeyword_1_0 = (Keyword)cDayshiftEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEveningshiftEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEveningshiftEveningshiftKeyword_2_0 = (Keyword)cEveningshiftEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Shift:
		//    nightshift | dayshift | eveningshift;
		public EnumRule getRule() { return rule; }
		
		//nightshift | dayshift | eveningshift
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//nightshift
		public EnumLiteralDeclaration getNightshiftEnumLiteralDeclaration_0() { return cNightshiftEnumLiteralDeclaration_0; }
		
		public Keyword getNightshiftNightshiftKeyword_0_0() { return cNightshiftNightshiftKeyword_0_0; }
		
		//dayshift
		public EnumLiteralDeclaration getDayshiftEnumLiteralDeclaration_1() { return cDayshiftEnumLiteralDeclaration_1; }
		
		public Keyword getDayshiftDayshiftKeyword_1_0() { return cDayshiftDayshiftKeyword_1_0; }
		
		//eveningshift
		public EnumLiteralDeclaration getEveningshiftEnumLiteralDeclaration_2() { return cEveningshiftEnumLiteralDeclaration_2; }
		
		public Keyword getEveningshiftEveningshiftKeyword_2_0() { return cEveningshiftEveningshiftKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final WorkerElements pWorker;
	private final TaskElements pTask;
	private final RuleElements pRule;
	private final SeniorityLevelElements eSeniorityLevel;
	private final DifficultyElements eDifficulty;
	private final BooleanElements eBoolean;
	private final TIMEElements pTIME;
	private final ConditionElements pCondition;
	private final OrConditionElements pOrCondition;
	private final AndConditionElements pAndCondition;
	private final PrimaryConditionElements pPrimaryCondition;
	private final ShiftConditionElements pShiftCondition;
	private final ShiftElements eShift;
	private final ComparisonElements pComparison;
	private final TerminalRule tComparisonOperator;
	private final DifficultyConditionElements pDifficultyCondition;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pWorker = new WorkerElements();
		this.pTask = new TaskElements();
		this.pRule = new RuleElements();
		this.eSeniorityLevel = new SeniorityLevelElements();
		this.eDifficulty = new DifficultyElements();
		this.eBoolean = new BooleanElements();
		this.pTIME = new TIMEElements();
		this.pCondition = new ConditionElements();
		this.pOrCondition = new OrConditionElements();
		this.pAndCondition = new AndConditionElements();
		this.pPrimaryCondition = new PrimaryConditionElements();
		this.pShiftCondition = new ShiftConditionElements();
		this.eShift = new ShiftElements();
		this.pComparison = new ComparisonElements();
		this.tComparisonOperator = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ComparisonOperator");
		this.pDifficultyCondition = new DifficultyConditionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    workers+=Worker*
	//    tasks+=Task*
	//    rules+=Rule*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	///**
	// * worker W1 {
	//    name = "Alice";
	//    seniority = senior;
	//    employeeNumber = 101;
	//    active = True;
	//}
	// */
	//Worker:
	//    'worker' id=ID '{'
	//        'name' '=' name=STRING ';'
	//        'seniority' '=' seniority=SeniorityLevel ';'
	//        //'employeeNumber' '=' employeeNumber=INT ';'
	//        'active' '=' isActive=Boolean ';'
	//    '}';
	public WorkerElements getWorkerAccess() {
		return pWorker;
	}
	
	public ParserRule getWorkerRule() {
		return getWorkerAccess().getRule();
	}
	
	///**
	// * task T1 {
	//    difficulty = easy;
	//    duration = 120;
	//    start = 9:00;
	//}
	// */
	//Task:
	//    'task' name=ID '{'
	//        'difficulty' '=' difficulty=Difficulty ';'
	//        'duration' '=' duration=INT ';'
	//        'start' '=' start=TIME ';'
	//    '}';
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	///**
	// * if (> 180 min OR hard) then senior;
	// */
	//Rule:
	//    'if' condition=Condition 'then' assign=SeniorityLevel ';';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//enum SeniorityLevel:
	//    trainee | junior | senior;
	public SeniorityLevelElements getSeniorityLevelAccess() {
		return eSeniorityLevel;
	}
	
	public EnumRule getSeniorityLevelRule() {
		return getSeniorityLevelAccess().getRule();
	}
	
	//enum Difficulty:
	//    easy | moderate | hard;
	public DifficultyElements getDifficultyAccess() {
		return eDifficulty;
	}
	
	public EnumRule getDifficultyRule() {
		return getDifficultyAccess().getRule();
	}
	
	//enum Boolean:
	//    True | False;
	public BooleanElements getBooleanAccess() {
		return eBoolean;
	}
	
	public EnumRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//TIME:
	//    hours=INT ':' minutes=INT;
	public TIMEElements getTIMEAccess() {
		return pTIME;
	}
	
	public ParserRule getTIMERule() {
		return getTIMEAccess().getRule();
	}
	
	//Condition:
	//    OrCondition;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	///**
	// * A OR (B AND C)
	// * First, an AndCondition is parsed (base case).
	// * Then, if OR/AND exists, the parser creates an OrCondition and assigns left=current (previously parsed expression)**.
	// */
	//OrCondition returns Condition:
	//    AndCondition ({OrCondition.left=current} 'OR' right=AndCondition)*;
	public OrConditionElements getOrConditionAccess() {
		return pOrCondition;
	}
	
	public ParserRule getOrConditionRule() {
		return getOrConditionAccess().getRule();
	}
	
	//AndCondition returns Condition:
	//    PrimaryCondition ({AndCondition.left=current} 'AND' right=PrimaryCondition)*;
	public AndConditionElements getAndConditionAccess() {
		return pAndCondition;
	}
	
	public ParserRule getAndConditionRule() {
		return getAndConditionAccess().getRule();
	}
	
	//PrimaryCondition returns Condition:
	//    //'(' Condition ')' |
	//    {PrimaryCondition} '(' inner=Condition ')' |
	//    Comparison |
	//    ShiftCondition |
	//    DifficultyCondition;
	public PrimaryConditionElements getPrimaryConditionAccess() {
		return pPrimaryCondition;
	}
	
	public ParserRule getPrimaryConditionRule() {
		return getPrimaryConditionAccess().getRule();
	}
	
	// /**
	//  * PrimaryCondition returns Condition:
	//    NestedCondition | SimpleCondition;
	//NestedCondition returns Condition:
	//    '(' Condition ')';
	//SimpleCondition returns Condition:
	//    Comparison | ShiftCondition | DifficultyCondition;
	//  */
	//ShiftCondition:
	//    shift=Shift;
	public ShiftConditionElements getShiftConditionAccess() {
		return pShiftCondition;
	}
	
	public ParserRule getShiftConditionRule() {
		return getShiftConditionAccess().getRule();
	}
	
	//enum Shift:
	//    nightshift | dayshift | eveningshift;
	public ShiftElements getShiftAccess() {
		return eShift;
	}
	
	public EnumRule getShiftRule() {
		return getShiftAccess().getRule();
	}
	
	//Comparison:
	//    operator=ComparisonOperator duration=INT 'min'?;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//terminal ComparisonOperator:
	//    '<' | '<=' | '=' | '>=' | '>';
	public TerminalRule getComparisonOperatorRule() {
		return tComparisonOperator;
	}
	
	//DifficultyCondition:
	//    difficulty=Difficulty;
	public DifficultyConditionElements getDifficultyConditionAccess() {
		return pDifficultyCondition;
	}
	
	public ParserRule getDifficultyConditionRule() {
		return getDifficultyConditionAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
