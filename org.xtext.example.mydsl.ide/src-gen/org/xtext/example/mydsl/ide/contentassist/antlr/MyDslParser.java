/*
 * generated by Xtext 2.37.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPrimaryConditionAccess().getAlternatives(), "rule__PrimaryCondition__Alternatives");
			builder.put(grammarAccess.getSeniorityLevelAccess().getAlternatives(), "rule__SeniorityLevel__Alternatives");
			builder.put(grammarAccess.getDifficultyAccess().getAlternatives(), "rule__Difficulty__Alternatives");
			builder.put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
			builder.put(grammarAccess.getShiftAccess().getAlternatives(), "rule__Shift__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getWorkerAccess().getGroup(), "rule__Worker__Group__0");
			builder.put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getTIMEAccess().getGroup(), "rule__TIME__Group__0");
			builder.put(grammarAccess.getOrConditionAccess().getGroup(), "rule__OrCondition__Group__0");
			builder.put(grammarAccess.getOrConditionAccess().getGroup_1(), "rule__OrCondition__Group_1__0");
			builder.put(grammarAccess.getAndConditionAccess().getGroup(), "rule__AndCondition__Group__0");
			builder.put(grammarAccess.getAndConditionAccess().getGroup_1(), "rule__AndCondition__Group_1__0");
			builder.put(grammarAccess.getPrimaryConditionAccess().getGroup_0(), "rule__PrimaryCondition__Group_0__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
			builder.put(grammarAccess.getModelAccess().getWorkersAssignment_0(), "rule__Model__WorkersAssignment_0");
			builder.put(grammarAccess.getModelAccess().getTasksAssignment_1(), "rule__Model__TasksAssignment_1");
			builder.put(grammarAccess.getModelAccess().getRulesAssignment_2(), "rule__Model__RulesAssignment_2");
			builder.put(grammarAccess.getWorkerAccess().getIdAssignment_1(), "rule__Worker__IdAssignment_1");
			builder.put(grammarAccess.getWorkerAccess().getNameAssignment_5(), "rule__Worker__NameAssignment_5");
			builder.put(grammarAccess.getWorkerAccess().getSeniorityAssignment_9(), "rule__Worker__SeniorityAssignment_9");
			builder.put(grammarAccess.getWorkerAccess().getIsActiveAssignment_13(), "rule__Worker__IsActiveAssignment_13");
			builder.put(grammarAccess.getTaskAccess().getNameAssignment_1(), "rule__Task__NameAssignment_1");
			builder.put(grammarAccess.getTaskAccess().getDifficultyAssignment_5(), "rule__Task__DifficultyAssignment_5");
			builder.put(grammarAccess.getTaskAccess().getDurationAssignment_9(), "rule__Task__DurationAssignment_9");
			builder.put(grammarAccess.getTaskAccess().getStartAssignment_13(), "rule__Task__StartAssignment_13");
			builder.put(grammarAccess.getRuleAccess().getConditionAssignment_1(), "rule__Rule__ConditionAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getAssignAssignment_3(), "rule__Rule__AssignAssignment_3");
			builder.put(grammarAccess.getTIMEAccess().getHoursAssignment_0(), "rule__TIME__HoursAssignment_0");
			builder.put(grammarAccess.getTIMEAccess().getMinutesAssignment_2(), "rule__TIME__MinutesAssignment_2");
			builder.put(grammarAccess.getOrConditionAccess().getRightAssignment_1_2(), "rule__OrCondition__RightAssignment_1_2");
			builder.put(grammarAccess.getAndConditionAccess().getRightAssignment_1_2(), "rule__AndCondition__RightAssignment_1_2");
			builder.put(grammarAccess.getPrimaryConditionAccess().getInnerAssignment_0_2(), "rule__PrimaryCondition__InnerAssignment_0_2");
			builder.put(grammarAccess.getShiftConditionAccess().getShiftAssignment(), "rule__ShiftCondition__ShiftAssignment");
			builder.put(grammarAccess.getComparisonAccess().getOperatorAssignment_0(), "rule__Comparison__OperatorAssignment_0");
			builder.put(grammarAccess.getComparisonAccess().getDurationAssignment_1(), "rule__Comparison__DurationAssignment_1");
			builder.put(grammarAccess.getDifficultyConditionAccess().getDifficultyAssignment(), "rule__DifficultyCondition__DifficultyAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
