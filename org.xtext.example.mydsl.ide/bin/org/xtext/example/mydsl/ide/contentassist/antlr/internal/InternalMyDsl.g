/*
 * generated by Xtext 2.37.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWorker
entryRuleWorker
:
{ before(grammarAccess.getWorkerRule()); }
	 ruleWorker
{ after(grammarAccess.getWorkerRule()); } 
	 EOF 
;

// Rule Worker
ruleWorker 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWorkerAccess().getGroup()); }
		(rule__Worker__Group__0)
		{ after(grammarAccess.getWorkerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTask
entryRuleTask
:
{ before(grammarAccess.getTaskRule()); }
	 ruleTask
{ after(grammarAccess.getTaskRule()); } 
	 EOF 
;

// Rule Task
ruleTask 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTaskAccess().getGroup()); }
		(rule__Task__Group__0)
		{ after(grammarAccess.getTaskAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTIME
entryRuleTIME
:
{ before(grammarAccess.getTIMERule()); }
	 ruleTIME
{ after(grammarAccess.getTIMERule()); } 
	 EOF 
;

// Rule TIME
ruleTIME 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTIMEAccess().getGroup()); }
		(rule__TIME__Group__0)
		{ after(grammarAccess.getTIMEAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getOrConditionParserRuleCall()); }
		ruleOrCondition
		{ after(grammarAccess.getConditionAccess().getOrConditionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrCondition
entryRuleOrCondition
:
{ before(grammarAccess.getOrConditionRule()); }
	 ruleOrCondition
{ after(grammarAccess.getOrConditionRule()); } 
	 EOF 
;

// Rule OrCondition
ruleOrCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrConditionAccess().getGroup()); }
		(rule__OrCondition__Group__0)
		{ after(grammarAccess.getOrConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndCondition
entryRuleAndCondition
:
{ before(grammarAccess.getAndConditionRule()); }
	 ruleAndCondition
{ after(grammarAccess.getAndConditionRule()); } 
	 EOF 
;

// Rule AndCondition
ruleAndCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndConditionAccess().getGroup()); }
		(rule__AndCondition__Group__0)
		{ after(grammarAccess.getAndConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryCondition
entryRulePrimaryCondition
:
{ before(grammarAccess.getPrimaryConditionRule()); }
	 rulePrimaryCondition
{ after(grammarAccess.getPrimaryConditionRule()); } 
	 EOF 
;

// Rule PrimaryCondition
rulePrimaryCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryConditionAccess().getAlternatives()); }
		(rule__PrimaryCondition__Alternatives)
		{ after(grammarAccess.getPrimaryConditionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShiftCondition
entryRuleShiftCondition
:
{ before(grammarAccess.getShiftConditionRule()); }
	 ruleShiftCondition
{ after(grammarAccess.getShiftConditionRule()); } 
	 EOF 
;

// Rule ShiftCondition
ruleShiftCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShiftConditionAccess().getShiftAssignment()); }
		(rule__ShiftCondition__ShiftAssignment)
		{ after(grammarAccess.getShiftConditionAccess().getShiftAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup()); }
		(rule__Comparison__Group__0)
		{ after(grammarAccess.getComparisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDifficultyCondition
entryRuleDifficultyCondition
:
{ before(grammarAccess.getDifficultyConditionRule()); }
	 ruleDifficultyCondition
{ after(grammarAccess.getDifficultyConditionRule()); } 
	 EOF 
;

// Rule DifficultyCondition
ruleDifficultyCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDifficultyConditionAccess().getDifficultyAssignment()); }
		(rule__DifficultyCondition__DifficultyAssignment)
		{ after(grammarAccess.getDifficultyConditionAccess().getDifficultyAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule SeniorityLevel
ruleSeniorityLevel
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSeniorityLevelAccess().getAlternatives()); }
		(rule__SeniorityLevel__Alternatives)
		{ after(grammarAccess.getSeniorityLevelAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Difficulty
ruleDifficulty
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDifficultyAccess().getAlternatives()); }
		(rule__Difficulty__Alternatives)
		{ after(grammarAccess.getDifficultyAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Boolean
ruleBoolean
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getAlternatives()); }
		(rule__Boolean__Alternatives)
		{ after(grammarAccess.getBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Shift
ruleShift
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShiftAccess().getAlternatives()); }
		(rule__Shift__Alternatives)
		{ after(grammarAccess.getShiftAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryCondition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryConditionAccess().getGroup_0()); }
		(rule__PrimaryCondition__Group_0__0)
		{ after(grammarAccess.getPrimaryConditionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryConditionAccess().getComparisonParserRuleCall_1()); }
		ruleComparison
		{ after(grammarAccess.getPrimaryConditionAccess().getComparisonParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryConditionAccess().getShiftConditionParserRuleCall_2()); }
		ruleShiftCondition
		{ after(grammarAccess.getPrimaryConditionAccess().getShiftConditionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryConditionAccess().getDifficultyConditionParserRuleCall_3()); }
		ruleDifficultyCondition
		{ after(grammarAccess.getPrimaryConditionAccess().getDifficultyConditionParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SeniorityLevel__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSeniorityLevelAccess().getTraineeEnumLiteralDeclaration_0()); }
		('trainee')
		{ after(grammarAccess.getSeniorityLevelAccess().getTraineeEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getSeniorityLevelAccess().getJuniorEnumLiteralDeclaration_1()); }
		('junior')
		{ after(grammarAccess.getSeniorityLevelAccess().getJuniorEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getSeniorityLevelAccess().getSeniorEnumLiteralDeclaration_2()); }
		('senior')
		{ after(grammarAccess.getSeniorityLevelAccess().getSeniorEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Difficulty__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDifficultyAccess().getEasyEnumLiteralDeclaration_0()); }
		('easy')
		{ after(grammarAccess.getDifficultyAccess().getEasyEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getDifficultyAccess().getModerateEnumLiteralDeclaration_1()); }
		('moderate')
		{ after(grammarAccess.getDifficultyAccess().getModerateEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getDifficultyAccess().getHardEnumLiteralDeclaration_2()); }
		('hard')
		{ after(grammarAccess.getDifficultyAccess().getHardEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getTrueEnumLiteralDeclaration_0()); }
		('True')
		{ after(grammarAccess.getBooleanAccess().getTrueEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanAccess().getFalseEnumLiteralDeclaration_1()); }
		('False')
		{ after(grammarAccess.getBooleanAccess().getFalseEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShiftAccess().getNightshiftEnumLiteralDeclaration_0()); }
		('nightshift')
		{ after(grammarAccess.getShiftAccess().getNightshiftEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getShiftAccess().getDayshiftEnumLiteralDeclaration_1()); }
		('dayshift')
		{ after(grammarAccess.getShiftAccess().getDayshiftEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getShiftAccess().getEveningshiftEnumLiteralDeclaration_2()); }
		('eveningshift')
		{ after(grammarAccess.getShiftAccess().getEveningshiftEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getWorkersAssignment_0()); }
	(rule__Model__WorkersAssignment_0)*
	{ after(grammarAccess.getModelAccess().getWorkersAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getTasksAssignment_1()); }
	(rule__Model__TasksAssignment_1)*
	{ after(grammarAccess.getModelAccess().getTasksAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getRulesAssignment_2()); }
	(rule__Model__RulesAssignment_2)*
	{ after(grammarAccess.getModelAccess().getRulesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Worker__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Worker__Group__0__Impl
	rule__Worker__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkerAccess().getWorkerKeyword_0()); }
	'worker'
	{ after(grammarAccess.getWorkerAccess().getWorkerKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Worker__Group__1__Impl
	rule__Worker__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkerAccess().getIdAssignment_1()); }
	(rule__Worker__IdAssignment_1)
	{ after(grammarAccess.getWorkerAccess().getIdAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Worker__Group__2__Impl
	rule__Worker__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkerAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getWorkerAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Worker__Group__3__Impl
	rule__Worker__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkerAccess().getNameKeyword_3()); }
	'name'
	{ after(grammarAccess.getWorkerAccess().getNameKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Worker__Group__4__Impl
	rule__Worker__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkerAccess().getEqualsSignKeyword_4()); }
	'='
	{ after(grammarAccess.getWorkerAccess().getEqualsSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Worker__Group__5__Impl
	rule__Worker__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkerAccess().getNameAssignment_5()); }
	(rule__Worker__NameAssignment_5)
	{ after(grammarAccess.getWorkerAccess().getNameAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Worker__Group__6__Impl
	rule__Worker__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkerAccess().getSemicolonKeyword_6()); }
	';'
	{ after(grammarAccess.getWorkerAccess().getSemicolonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Worker__Group__7__Impl
	rule__Worker__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkerAccess().getSeniorityKeyword_7()); }
	'seniority'
	{ after(grammarAccess.getWorkerAccess().getSeniorityKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Worker__Group__8__Impl
	rule__Worker__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkerAccess().getEqualsSignKeyword_8()); }
	'='
	{ after(grammarAccess.getWorkerAccess().getEqualsSignKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Worker__Group__9__Impl
	rule__Worker__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkerAccess().getSeniorityAssignment_9()); }
	(rule__Worker__SeniorityAssignment_9)
	{ after(grammarAccess.getWorkerAccess().getSeniorityAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Worker__Group__10__Impl
	rule__Worker__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkerAccess().getSemicolonKeyword_10()); }
	';'
	{ after(grammarAccess.getWorkerAccess().getSemicolonKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Worker__Group__11__Impl
	rule__Worker__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkerAccess().getActiveKeyword_11()); }
	'active'
	{ after(grammarAccess.getWorkerAccess().getActiveKeyword_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Worker__Group__12__Impl
	rule__Worker__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkerAccess().getEqualsSignKeyword_12()); }
	'='
	{ after(grammarAccess.getWorkerAccess().getEqualsSignKeyword_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__13
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Worker__Group__13__Impl
	rule__Worker__Group__14
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__13__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkerAccess().getIsActiveAssignment_13()); }
	(rule__Worker__IsActiveAssignment_13)
	{ after(grammarAccess.getWorkerAccess().getIsActiveAssignment_13()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__14
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Worker__Group__14__Impl
	rule__Worker__Group__15
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__14__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkerAccess().getSemicolonKeyword_14()); }
	';'
	{ after(grammarAccess.getWorkerAccess().getSemicolonKeyword_14()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__15
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Worker__Group__15__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__Group__15__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWorkerAccess().getRightCurlyBracketKeyword_15()); }
	'}'
	{ after(grammarAccess.getWorkerAccess().getRightCurlyBracketKeyword_15()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Task__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__0__Impl
	rule__Task__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getTaskKeyword_0()); }
	'task'
	{ after(grammarAccess.getTaskAccess().getTaskKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__1__Impl
	rule__Task__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getNameAssignment_1()); }
	(rule__Task__NameAssignment_1)
	{ after(grammarAccess.getTaskAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__2__Impl
	rule__Task__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getTaskAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__3__Impl
	rule__Task__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getDifficultyKeyword_3()); }
	'difficulty'
	{ after(grammarAccess.getTaskAccess().getDifficultyKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__4__Impl
	rule__Task__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getEqualsSignKeyword_4()); }
	'='
	{ after(grammarAccess.getTaskAccess().getEqualsSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__5__Impl
	rule__Task__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getDifficultyAssignment_5()); }
	(rule__Task__DifficultyAssignment_5)
	{ after(grammarAccess.getTaskAccess().getDifficultyAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__6__Impl
	rule__Task__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getSemicolonKeyword_6()); }
	';'
	{ after(grammarAccess.getTaskAccess().getSemicolonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__7__Impl
	rule__Task__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getDurationKeyword_7()); }
	'duration'
	{ after(grammarAccess.getTaskAccess().getDurationKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__8__Impl
	rule__Task__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getEqualsSignKeyword_8()); }
	'='
	{ after(grammarAccess.getTaskAccess().getEqualsSignKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__9__Impl
	rule__Task__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getDurationAssignment_9()); }
	(rule__Task__DurationAssignment_9)
	{ after(grammarAccess.getTaskAccess().getDurationAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__10__Impl
	rule__Task__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getSemicolonKeyword_10()); }
	';'
	{ after(grammarAccess.getTaskAccess().getSemicolonKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__11__Impl
	rule__Task__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getStartKeyword_11()); }
	'start'
	{ after(grammarAccess.getTaskAccess().getStartKeyword_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__12__Impl
	rule__Task__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getEqualsSignKeyword_12()); }
	'='
	{ after(grammarAccess.getTaskAccess().getEqualsSignKeyword_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__13
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__13__Impl
	rule__Task__Group__14
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__13__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getStartAssignment_13()); }
	(rule__Task__StartAssignment_13)
	{ after(grammarAccess.getTaskAccess().getStartAssignment_13()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__14
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__14__Impl
	rule__Task__Group__15
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__14__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getSemicolonKeyword_14()); }
	';'
	{ after(grammarAccess.getTaskAccess().getSemicolonKeyword_14()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__15
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__15__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__15__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getRightCurlyBracketKeyword_15()); }
	'}'
	{ after(grammarAccess.getTaskAccess().getRightCurlyBracketKeyword_15()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getRuleAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getConditionAssignment_1()); }
	(rule__Rule__ConditionAssignment_1)
	{ after(grammarAccess.getRuleAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getThenKeyword_2()); }
	'then'
	{ after(grammarAccess.getRuleAccess().getThenKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getAssignAssignment_3()); }
	(rule__Rule__AssignAssignment_3)
	{ after(grammarAccess.getRuleAccess().getAssignAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getRuleAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TIME__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TIME__Group__0__Impl
	rule__TIME__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTIMEAccess().getHoursAssignment_0()); }
	(rule__TIME__HoursAssignment_0)
	{ after(grammarAccess.getTIMEAccess().getHoursAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TIME__Group__1__Impl
	rule__TIME__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTIMEAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getTIMEAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TIME__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTIMEAccess().getMinutesAssignment_2()); }
	(rule__TIME__MinutesAssignment_2)
	{ after(grammarAccess.getTIMEAccess().getMinutesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrCondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrCondition__Group__0__Impl
	rule__OrCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConditionAccess().getAndConditionParserRuleCall_0()); }
	ruleAndCondition
	{ after(grammarAccess.getOrConditionAccess().getAndConditionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrCondition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConditionAccess().getGroup_1()); }
	(rule__OrCondition__Group_1__0)*
	{ after(grammarAccess.getOrConditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrCondition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrCondition__Group_1__0__Impl
	rule__OrCondition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConditionAccess().getOrConditionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOrConditionAccess().getOrConditionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrCondition__Group_1__1__Impl
	rule__OrCondition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConditionAccess().getORKeyword_1_1()); }
	'OR'
	{ after(grammarAccess.getOrConditionAccess().getORKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrCondition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrConditionAccess().getRightAssignment_1_2()); }
	(rule__OrCondition__RightAssignment_1_2)
	{ after(grammarAccess.getOrConditionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndCondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndCondition__Group__0__Impl
	rule__AndCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConditionAccess().getPrimaryConditionParserRuleCall_0()); }
	rulePrimaryCondition
	{ after(grammarAccess.getAndConditionAccess().getPrimaryConditionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndCondition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConditionAccess().getGroup_1()); }
	(rule__AndCondition__Group_1__0)*
	{ after(grammarAccess.getAndConditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndCondition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndCondition__Group_1__0__Impl
	rule__AndCondition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConditionAccess().getAndConditionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndConditionAccess().getAndConditionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndCondition__Group_1__1__Impl
	rule__AndCondition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConditionAccess().getANDKeyword_1_1()); }
	'AND'
	{ after(grammarAccess.getAndConditionAccess().getANDKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndCondition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndConditionAccess().getRightAssignment_1_2()); }
	(rule__AndCondition__RightAssignment_1_2)
	{ after(grammarAccess.getAndConditionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryCondition__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryCondition__Group_0__0__Impl
	rule__PrimaryCondition__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryCondition__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryConditionAccess().getPrimaryConditionAction_0_0()); }
	()
	{ after(grammarAccess.getPrimaryConditionAccess().getPrimaryConditionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryCondition__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryCondition__Group_0__1__Impl
	rule__PrimaryCondition__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryCondition__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryConditionAccess().getLeftParenthesisKeyword_0_1()); }
	'('
	{ after(grammarAccess.getPrimaryConditionAccess().getLeftParenthesisKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryCondition__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryCondition__Group_0__2__Impl
	rule__PrimaryCondition__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryCondition__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryConditionAccess().getInnerAssignment_0_2()); }
	(rule__PrimaryCondition__InnerAssignment_0_2)
	{ after(grammarAccess.getPrimaryConditionAccess().getInnerAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryCondition__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryCondition__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryCondition__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryConditionAccess().getRightParenthesisKeyword_0_3()); }
	')'
	{ after(grammarAccess.getPrimaryConditionAccess().getRightParenthesisKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getOperatorAssignment_0()); }
	(rule__Comparison__OperatorAssignment_0)
	{ after(grammarAccess.getComparisonAccess().getOperatorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__1__Impl
	rule__Comparison__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getDurationAssignment_1()); }
	(rule__Comparison__DurationAssignment_1)
	{ after(grammarAccess.getComparisonAccess().getDurationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getMinKeyword_2()); }
	('min')?
	{ after(grammarAccess.getComparisonAccess().getMinKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__WorkersAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getWorkersWorkerParserRuleCall_0_0()); }
		ruleWorker
		{ after(grammarAccess.getModelAccess().getWorkersWorkerParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__TasksAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getTasksTaskParserRuleCall_1_0()); }
		ruleTask
		{ after(grammarAccess.getModelAccess().getTasksTaskParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__RulesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getRulesRuleParserRuleCall_2_0()); }
		ruleRule
		{ after(grammarAccess.getModelAccess().getRulesRuleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__IdAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorkerAccess().getIdIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getWorkerAccess().getIdIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__NameAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorkerAccess().getNameSTRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getWorkerAccess().getNameSTRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__SeniorityAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorkerAccess().getSenioritySeniorityLevelEnumRuleCall_9_0()); }
		ruleSeniorityLevel
		{ after(grammarAccess.getWorkerAccess().getSenioritySeniorityLevelEnumRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Worker__IsActiveAssignment_13
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWorkerAccess().getIsActiveBooleanEnumRuleCall_13_0()); }
		ruleBoolean
		{ after(grammarAccess.getWorkerAccess().getIsActiveBooleanEnumRuleCall_13_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__DifficultyAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getDifficultyDifficultyEnumRuleCall_5_0()); }
		ruleDifficulty
		{ after(grammarAccess.getTaskAccess().getDifficultyDifficultyEnumRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__DurationAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getDurationINTTerminalRuleCall_9_0()); }
		RULE_INT
		{ after(grammarAccess.getTaskAccess().getDurationINTTerminalRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__StartAssignment_13
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getStartTIMEParserRuleCall_13_0()); }
		ruleTIME
		{ after(grammarAccess.getTaskAccess().getStartTIMEParserRuleCall_13_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getConditionConditionParserRuleCall_1_0()); }
		ruleCondition
		{ after(grammarAccess.getRuleAccess().getConditionConditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__AssignAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getAssignSeniorityLevelEnumRuleCall_3_0()); }
		ruleSeniorityLevel
		{ after(grammarAccess.getRuleAccess().getAssignSeniorityLevelEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME__HoursAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTIMEAccess().getHoursINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getTIMEAccess().getHoursINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TIME__MinutesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTIMEAccess().getMinutesINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getTIMEAccess().getMinutesINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrCondition__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrConditionAccess().getRightAndConditionParserRuleCall_1_2_0()); }
		ruleAndCondition
		{ after(grammarAccess.getOrConditionAccess().getRightAndConditionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndCondition__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndConditionAccess().getRightPrimaryConditionParserRuleCall_1_2_0()); }
		rulePrimaryCondition
		{ after(grammarAccess.getAndConditionAccess().getRightPrimaryConditionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryCondition__InnerAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryConditionAccess().getInnerConditionParserRuleCall_0_2_0()); }
		ruleCondition
		{ after(grammarAccess.getPrimaryConditionAccess().getInnerConditionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShiftCondition__ShiftAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShiftConditionAccess().getShiftShiftEnumRuleCall_0()); }
		ruleShift
		{ after(grammarAccess.getShiftConditionAccess().getShiftShiftEnumRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OperatorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOperatorComparisonOperatorTerminalRuleCall_0_0()); }
		RULE_COMPARISONOPERATOR
		{ after(grammarAccess.getComparisonAccess().getOperatorComparisonOperatorTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__DurationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getDurationINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getComparisonAccess().getDurationINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DifficultyCondition__DifficultyAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDifficultyConditionAccess().getDifficultyDifficultyEnumRuleCall_0()); }
		ruleDifficulty
		{ after(grammarAccess.getDifficultyConditionAccess().getDifficultyDifficultyEnumRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_COMPARISONOPERATOR : ('<'|'<='|'='|'>='|'>');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
